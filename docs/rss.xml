<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Alpha的博客</title><link>https://mengmeng130402.github.io/mengmeng.github.io</link><description>记录一些平时的那些事儿</description><copyright>Alpha的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/114229612?v=4</url><title>avatar</title><link>https://mengmeng130402.github.io/mengmeng.github.io</link></image><lastBuildDate>Thu, 01 May 2025 07:49:28 +0000</lastBuildDate><managingEditor>Alpha的博客</managingEditor><ttl>60</ttl><webMaster>Alpha的博客</webMaster><item><title>六年级圆、扇形、圆柱与圆锥知识点整理</title><link>https://mengmeng130402.github.io/mengmeng.github.io/post/liu-nian-ji-yuan-%E3%80%81-shan-xing-%E3%80%81-yuan-zhu-yu-yuan-zhui-zhi-shi-dian-zheng-li.html</link><description># 六年级圆、扇形、圆柱与圆锥知识点整理

---

## 一、圆与扇形  
### 1. 圆的基本概念  
- **圆心**：圆的中心点。</description><guid isPermaLink="true">https://mengmeng130402.github.io/mengmeng.github.io/post/liu-nian-ji-yuan-%E3%80%81-shan-xing-%E3%80%81-yuan-zhu-yu-yuan-zhui-zhi-shi-dian-zheng-li.html</guid><pubDate>Thu, 01 May 2025 07:48:56 +0000</pubDate></item><item><title>st表笔记</title><link>https://mengmeng130402.github.io/mengmeng.github.io/post/st-biao-bi-ji.html</link><description># st表
用于解决RMQ(区间最值查询)
## 对数换底公式
当a&gt;0，a≠1，b&gt;0，b≠1且N&gt;0时，
以b为底N的对数 = 以a为底N的对数 / 以a为底b的对数
## 预计算
`st[p][i]`代表从i号开始共 2^p个数的最大值，也就是[i,i+2^p-1]区间的最大值
当p为1时，`st[0][i]` 均为原值
之后的其他行，每个值都由上一行的两覆盖了这的区间的区间拼接而成
## 查询
同样由两个区间拼接而成
先算出区间长度以2为底时的对数（确定在哪一行）
接着由重叠的区间拼接而成的（最大值重叠没有影响）
## 代码
```
#include&lt;bits/stdc++.h&gt;
using namespace std;
const int N = 1e5;
int n , m , l , r;
int x[N] , st[N][20];
void ST(){
	for (int i = 1;i &lt;= n ; i++){
		st[0][i] = x[i];
		//第一行均为原来的值 
	}
	int p = log(n) / log(2);
	//以2为底，n的对数
	for (int k = 1; k &lt;= p ; k++){
		for (int i = 1; i &lt;= n - (1 &lt;&lt; k) + 1; i++){
			st[k][i] = max(st[k-1][i],st[k-1][i+(1&lt;&lt;(k-1))]);
			//拼接上一行 
		}
	} 
}
int query(int l , int r){
	int p = log(r-l + 1) / log(2);
	return max(st[p][l],st[p][r-(1&lt;&lt;p)+1]) ;
	// r-(1&lt;&lt;p)+1 由r反推l 
}
int main() {
	cin &gt;&gt; n &gt;&gt; m;
	for (int i = 1; i &lt;= n ; i++){
		cin &gt;&gt; x[i];
	}
	ST();
	for (int i= 1;i &lt;= m ; i++){
		cin &gt;&gt; l &gt;&gt; r;
		cout &lt;&lt; query(l,r) &lt;&lt; endl;
	}
	
	return 0;
}
```
有错请指出。</description><guid isPermaLink="true">https://mengmeng130402.github.io/mengmeng.github.io/post/st-biao-bi-ji.html</guid><pubDate>Thu, 01 May 2025 04:41:35 +0000</pubDate></item><item><title>分块笔记</title><link>https://mengmeng130402.github.io/mengmeng.github.io/post/fen-kuai-bi-ji.html</link><description># 分块笔记&#13;
## 问题&#13;
在解决点、段更行、查询的时候，数据很多会超时&#13;
## 时间比较&#13;
就已 点更新，段查询 (求区间总和)为例。</description><guid isPermaLink="true">https://mengmeng130402.github.io/mengmeng.github.io/post/fen-kuai-bi-ji.html</guid><pubDate>Thu, 24 Oct 2024 11:26:19 +0000</pubDate></item></channel></rss>